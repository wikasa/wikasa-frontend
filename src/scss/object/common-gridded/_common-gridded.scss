/** ------------------------------------------------------------------------- *\
 *  WIKASA.OBJECT.COMMON-GRIDDED
 *  
 *  A set of containers, rows, and columns with predefined size,
 *  and aligned with its underlying grid.
 *  
 *  @author Bangsawan & Silvia
 *  
 *  @version 0.0.1
 *  Copyright 2014. Free licensed.
 ** ------------------------------------------------------------------------- */

$_items: 'alpha',
         'beta',
         'gamma',
         'delta',
         'epsilon',
         'zeta',
         'eta',
         'theta',
         'iota',
         'kappa',
         'lambda',
         'mu';

// CONTAINER FULL MIXIN ------------------------------------------------------ >
@mixin _container-full() {
    & > *[class^="column"] {
        width: element_width($total_columns);
        &:nth-child(n+2) { margin-top: 1em; }
    }
}

/** ------------------------------------------------------------------------- *\
 *  Predefined Container Objects
 ** ------------------------------------------------------------------------- */

// CONTAINER STANDARD MIXIN -------------------------------------------------- >
@mixin _container-std() {
    @each $_item in $_items {
        & > .column-#{$_item} {
            @if index($_items, $_item) <= $total_columns {
                width: element_width(index($_items, $_item));
            } @else {
                width: element_width($total_columns);
            }
        }
    }
}

/* CONTAINER STANDARD ------------------------------------------------------- */
.container {
    @include media-query($mobile) {
        $total_columns: 4;
        $total_width: _get_total_from_column(4em);
        @include _container-std();
    }
    @include media-query($mobtab) {
        $total_columns: 4;
        $total_width: _get_total_from_column(6em);
        @include _container-std();
    }
    @include media-query($tablet) {
        $total_columns: 6;
        $total_width: _get_total_from_column(5.5em);
        @include _container-std();
    }
    @include media-query($tabtop) {
        $total_columns: 8;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
    @include media-query($desktop) {
        $total_columns: 10;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
    @include media-query($wide) {
        $total_columns: 12;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
}

/* CONTAINER FULL ----------------------------------------------------------- */
.container-full {
    @include media-query($mobile) {
        $total_columns: 4;
        $total_width: _get_total_from_column(4em);
        @include _container-std();
    }
    @include media-query($mobtab) {
        $total_columns: 4;
        $total_width: _get_total_from_column(6em);
        @include _container-std();
    }
    @include media-query($tablet) {
        $total_columns: 6;
        $total_width: _get_total_from_column(5.5em);
        @include _container-std();
    }
    @include media-query($tabtop) {
        $total_columns: 8;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
    @include media-query($desktop) {
        $total_columns: 10;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
    @include media-query($wide) {
        $total_columns: 12;
        $total_width: _get_total_from_column(5em);
        @include _container-std();
    }
}

// CONTAINER UNI MIXIN ------------------------------------------------------- >

// @TODO: Need more abstracted mixin. Column Patter still buggy.
@mixin container-uni($_column_pattern: $total_columns) {
    $j: 1;
    & > *[class^="column"] {

        @if $_column_pattern > $total_columns {
            $_column_pattern: $total_columns;
        }

        @if ($total_columns % $_column_pattern) > 0 {
            $_column_pattern: $total_columns;
        }

        @include column($total_columns / $_column_pattern);

        @while $j <= ($_column_pattern + 1) {
            @if $j <= $_column_pattern {
                &:nth-child(#{$_column_pattern}n + #{$j}) { @include push($total_columns * ($j - 1) / $_column_pattern); }
            } @else {
                &:nth-child(#{$_column_pattern}n + #{$j}) { clear: left; }
            }
            $j: $j + 1;
        }

        &:nth-child(n + #{$_column_pattern + 1}) { margin-top: 1em; }
    }
}

/* CONTAINER UNI ------------------------------------------------------------ */

@for $i from 1 through 12 {
    .container-uni-#{$i} {
        @include media-query($mobile) {
            $total_columns: 4;
            $total_width: _get_total_from_column(4em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
        @include media-query($mobtab) {
            $total_columns: 4;
            $total_width: _get_total_from_column(6em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
        @include media-query($tablet) {
            $total_columns: 6;
            $total_width: _get_total_from_column(5.5em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
        @include media-query($tabtop) {
            $total_columns: 8;
            $total_width: _get_total_from_column(5em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
        @include media-query($desktop) {
            $total_columns: 10;
            $total_width: _get_total_from_column(5em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
        @include media-query($wide) {
            $total_columns: 12;
            $total_width: _get_total_from_column(5em);
            @if $i <= $total_columns { @include container-uni($i); }
            @else { @include container-uni($total_columns); }
        }
    }
}

/* CONTAINER CENTER --------------------------------------------------------- */
@mixin _container-center($_type, $_breakpoints, $_totals, $_widths) {
    @each $_breakpoint in $_breakpoints {
        // $_i: index( $_breakpoints, $_breakpoint );
        // $_b: $_breakpoint;
        @include media-query( $_breakpoint ) {
            $total_columns: nth($_totals, index( $_breakpoints, $_breakpoint ));
            $total_width: nth($_widths, index( $_breakpoints, $_breakpoint ));

            & > .column {

                @if $_type < $total_columns {
                    $_margin: ($total_columns - $_type) / 2;
                    @include column($total_columns - 2);
                    @include push($_margin);
                } @else {
                    // $_type: $total_columns - 2;
                    $_margin: ($total_columns - 2) / 2;
                    @include column($total_columns - 2);
                    @include push(1);
                }

                &:nth-child(n+2) {
                    clear: left;
                    margin-top: z(1rem);
                }

            }
        }
    }
}

$_container-center-type: 2 4 6 8 10 12;

@each $_type in $_container-center-type {
    .container-center-2 {
        @include _container-center(2, $breakpoint_list, $total_columns_list, $total_width_list);
    }
    .container-center-4 {
        @include _container-center(4, $breakpoint_list, $total_columns_list, $total_width_list);
    }
    .container-center-6 {
        @include _container-center(6, $breakpoint_list, $total_columns_list, $total_width_list);
    }
    .container-center-8 {
        @include _container-center(8, $breakpoint_list, $total_columns_list, $total_width_list);
    }
    .container-center-10 {
        @include _container-center(10, $breakpoint_list, $total_columns_list, $total_width_list);
    }
    .container-center-12 {
        @include _container-center(12, $breakpoint_list, $total_columns_list, $total_width_list);
    }
}

// PUSH MIXIN ---------------------------------------------------------------- >
@mixin _push($_total_columns: 12) {
    @for $i from 0 through ($_total_columns - 1){
        .#{$class_push}#{$i} {
            @include push($i);
        }
    }
}

/* PUSH COLUMN -------------------------------------------------------------- */
@include media-query($mobile) {
    $total_columns: 3;
    $total_width: 18.5em; // 18.5 * 16px = 296px
    @include _push($total_columns);
}
@include media-query($tablet) {
    $total_columns: 12;
    $total_width: 38em; // 16 * 20px = 320px
    @include _push($total_columns);
}
@include media-query($desktop) {
    $total_columns: 12;
    $total_width: 59em; // 16 * 20px = 320px
    @include _push($total_columns);
}
@include media-query($wide) {
    $total_columns: 12;
    $total_width: 71em; // 16 * 20px = 320px
    @include _push($total_columns);
}

/* TEST MOCK ---------------------------------------------------------------- */
*[class^="container"].test > *[class^="column"] {
    min-height: 5em;
    background-color: #DDD;
}
